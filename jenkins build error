# Ensure the build fails if there is a problem.
# The build will fail if there are any errors on the remote machine too
$ErrorActionPreference = 'Stop'

# Create a PSCredential Object using the "User" and "Password" parameters that you passed to the job
$SecurePassword = $env:PASSWORD | ConvertTo-SecureString -AsPlainText -Force
$cred = New-Object System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, $SecurePassword

# get the environment name
$APP_NAME = $env:CHART_APP.Split('-') | Select-Object -Last 1

# set package parameters
#$ENV_NAME = $env:SERVERNAME -split $APP_NAME | Select-Object -First 1
$ENV_NAME = $env:SERVERNAME

# get the install version of the app
#$SVN_URL = $env:SOURCE_URL
#$PRODUCT_VERSION = $SVN_URL.Split('/') | Select-Object -Last 1
#$PRODUCT_VERSION = $PRODUCT_VERSION.Trim("R"," ")
$PRODUCT_VERSION = $env:BRANCH_NUMBER.Trim("R"," ")
$PRODUCT_VERSION = "`'$PRODUCT_VERSION`'"

# define app1 and exp1 server names and parameters
$APPSERVER = $ENV_NAME + "atmsapp"
$APPPARAMS = "`'/ENV:$ENV_NAME /CFG:app /STARTSERVICES`'"

# Invoke a command on the remote machine.
$stopTomcat = "`$tomcatProc = Get-Process tomcat9 -ErrorAction SilentlyContinue; if (!`$tomcatProc.HasExited) { write-host `"tomcat is running - stopping process`"; `$tomcatProc | Stop-Process -Force }"
$appInstCmd = "choco upgrade $env:CHART_APP -y --params $APPPARAMS --version $PRODUCT_VERSION --force --source http://chartcmci01/chocolatey/"

# run install on app1 server
write-host "Running commands on $APPSERVER"
write-host "Tomcat Stop Command:  $stopTomcat"
write-host "Install Command:  $appInstCmd"

$tomcatScript = [scriptblock]::Create($stopTomcat)
$result = $(Invoke-command -computer $APPSERVER -Credential $cred -ScriptBlock $tomcatScript)
write-host $result

$instScript = [scriptblock]::Create($appInstCmd)
$result = $(Invoke-command -computer $APPSERVER -Credential $cred -ScriptBlock $instScript)
write-host $result


###########################

{
$psSession = New-PSSession -ComputerName $APPSERVER -Credential $cred  -Name "Test"
$result = $(Invoke-command -ScriptBlock $instScript -SessionName "Test")
Disconnect-PSSession -Session $psSession

}
catch
{
    Disconnect-PSSession -Session $psSession
    throw $Error
}



###################################

{
# add line 42 here 
}
catch
{
 if ("java" -eq $error[0].Exception.CommandName)
 {
    Write-Host "Known jenkins issue. Absorbing error as build runs fine."
 }
 else
 {
    throw $error[0]
 }
}
